#!/usr/bin/env python3
# Orangebox - Cleanflight/Betaflight blackbox data parser.
# Copyright (C) 2019  Yurii Soldak & Plasmatree PID Analyser developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os
import logging
from argparse import ArgumentDefaultsHelpFormatter, ArgumentParser
from pathlib import Path

def main(args):

    with open(args.path, 'rb') as f:
        content = f.read()

    # The first line of the overall BBL file re-appears at the beginning of each recorded session.
    try:
        first_newline_index = content.index(str('\n').encode('utf8'))
    except ValueError as e:
        raise ValueError('No newline in %dB of log data from %r.' % (len(content), fpath), e)
    firstline = content[:first_newline_index + 1]
    parts = content.split(firstline)
    print(len(parts))

    os.makedirs(args.output, exist_ok = True)

    for i in range(1,len(parts)):
        name, ext = os.path.splitext(os.path.basename(args.path))
        out_path = os.path.join(args.output, '%s.%d%s' % (name, i, ext))
        with open(out_path, 'wb') as newfile:
            newfile.write(firstline+parts[i])

if __name__ == "__main__":
    argparser = ArgumentParser(formatter_class=ArgumentDefaultsHelpFormatter)
    argparser.add_argument("path", help="Path to a blackbox log file")
    argparser.add_argument("-o", "--output", default=None, help="Optional path to output directory, defaults to parent directory of the original log file")
    argparser.add_argument("-v", dest="verbosity", action="count", default=0,
                           help="Control verbosity (can be used multiple times)")

    args = argparser.parse_args()

    if args.output is None:
        args.output = Path(args.path).parent
    print(args.output)

    levels = [logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG]
    if args.verbosity >= len(levels):
        raise IndexError("Verbosity must be 0 <= n < 4")
    logging.basicConfig(level=levels[args.verbosity],
                        format='%(asctime)s %(name)s %(levelname)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')

    main(args)
